import { useState } from "react";
import type { NextPage } from "next";
import { TextToImageResponse } from "~~/types/stability";
import { UploadButton, useUploadThing } from "~~/utils/uploadthing";

const createFileFromBase64 = (base64String: string, fileName: string, mimeType: string): File => {
  const byteCharacters = atob(base64String);
  const byteArrays = [];

  for (let offset = 0; offset < byteCharacters.length; offset += 512) {
    const slice = byteCharacters.slice(offset, offset + 512);

    const byteNumbers = new Array(slice.length);
    for (let i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }

  const blob = new Blob(byteArrays, { type: mimeType });
  return new File([blob], fileName, { type: mimeType });
};

const Stability: NextPage = () => {
  // for uploaded from user
  const [currentImage, setCurrentImage] = useState<string>();
  // for generated by stability
  const [base64Image, setBase64Image] = useState<string>();
  const [textInput, setTextInput] = useState("");
  const { startUpload, permittedFileInfo } = useUploadThing("imageUploader", {
    onClientUploadComplete: () => {
      alert("uploaded successfully!");
    },
    onUploadError: () => {
      alert("error occurred while uploading");
    },
    onUploadBegin: () => {
      alert("upload has begun");
    },
  });

  const convertImage = async () => {
    try {
      let bodyData;

      if (base64Image) {
        const fileName = "image.png";
        const mimeType = "image/png";

        const file = createFileFromBase64(base64Image, fileName, mimeType);
        const image = await startUpload([file]);
        console.log("ðŸš€ ~ file: stability.tsx:54 ~ convertImage ~ image:", image);
        if (!image) throw new Error("Failed to upload image");
        bodyData = {
          imageUrl: image[0].url,
        };
      } else {
        bodyData = {
          imageUrl: currentImage,
        };
      }

      const response = await fetch("/api/image-to-image", {
        method: "POST",
        body: JSON.stringify(bodyData),
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const { src } = await response.json();
        setBase64Image(src);
      } else {
        throw new Error("Failed to convert image");
      }
    } catch (error) {
      console.error(error);
    }
  };

  // Function to call the Next.js API endpoint
  async function callTextToImageAPI(text: string) {
    console.log("Calling API");
    const response = await fetch("/api/text-to-image", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ text }),
    });

    if (!response.ok) {
      throw new Error("Failed to call the API");
    }

    console.log("Call successful");
    const data = (await response.json()) as TextToImageResponse;
    return data.files[0].src;
  }

  return (
    <div className="flex flex-col justify-center items-center gap-4 p-2">
      <UploadButton
        endpoint="imageUploader"
        onClientUploadComplete={res => {
          console.log("Files: ", res);
          setCurrentImage(res[0]?.url);
        }}
        onUploadError={(error: Error) => {
          alert(`ERROR! ${error.message}`);
        }}
      />
      <img
        className="w-full max-w-lg h-auto"
        src={currentImage || base64Image || "https://via.placeholder.com/1024"}
        alt="Base64 encoded"
      />
      <div>
        <input
          className="input"
          type="text"
          onChange={e => {
            setTextInput(e.target.value);
          }}
        />
        <button disabled={!(base64Image && currentImage)} onClick={convertImage} className="btn btn-secondary">
          Convert
        </button>
        <button
          onClick={async () => {
            const src = await callTextToImageAPI(textInput);
            setBase64Image(src);
          }}
          className="btn btn-primary"
        >
          Generate
        </button>
      </div>
    </div>
  );
};

export default Stability;
