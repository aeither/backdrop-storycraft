import { useState } from "react";
import type { NextPage } from "next";
import { useStore } from "zustand";
import useTimelineStore from "~~/services/store/timelineStore";
import { TextToImageResponse } from "~~/types/stability";
import { UploadButton, useUploadThing } from "~~/utils/uploadthing";

function dataURLtoFile(dataurl: string, filename: string): File {
  const arr = dataurl.split(",");
  const mimeMatch = arr[0] && arr[0].match(/:(.*?);/);
  let mime;

  if (mimeMatch && mimeMatch[1]) {
    mime = mimeMatch[1];
    // Your code using mime variable here
  } else {
    // Handle the case when arr[0] is null or the regex match is unsuccessful
    console.error("Unable to determine MIME type");
  }

  const bstr = atob(arr[arr.length - 1]);
  let n = bstr.length;
  const u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new File([u8arr], filename, { type: mime });
}

type LastType = "uploaded" | "generated";

const Stability: NextPage = () => {
  // for uploaded from user
  const [currentImage, setCurrentImage] = useState<string>();
  // for generated by stability
  const [base64Image, setBase64Image] = useState<string>();
  const [textInput, setTextInput] = useState("");
  const [lastType, setLastType] = useState<LastType>();
  const [isLoading, setIsLoading] = useState(false);
  const timeline = useTimelineStore(state => state.timeline);
  const setTimeline = useTimelineStore(state => state.setTimeline);
  const resetTimeline = useTimelineStore(state => state.reset);

  const { startUpload, permittedFileInfo } = useUploadThing("imageUploader", {
    onClientUploadComplete: () => {
      console.log("uploaded successfully!");
    },
    onUploadError: () => {
      alert("error occurred while uploading");
    },
    onUploadBegin: () => {
      alert("upload has begun");
    },
  });

  const convertImage = async () => {
    try {
      let bodyData;

      if (base64Image) {
        const fileName = "image.png";
        const mimeType = "image/png";

        const file = dataURLtoFile(base64Image, fileName);
        const image = await startUpload([file]);
        console.log("ðŸš€ ~ file: stability.tsx:54 ~ convertImage ~ image:", image);
        if (!image) throw new Error("Failed to upload image");
        bodyData = {
          imageUrl: image[0].url,
          prompt: textInput,
        };
      } else {
        bodyData = {
          imageUrl: currentImage,
          prompt: textInput,
        };
      }

      console.log("fetching...");

      const response = await fetch("/api/image-to-image", {
        method: "POST",
        body: JSON.stringify(bodyData),
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const { src } = await response.json();
        setBase64Image(src);
        setLastType("generated");
      } else {
        throw new Error("Failed to convert image");
      }
    } catch (error) {
      console.error(error);
    }
  };

  // Function to call the Next.js API endpoint
  async function callTextToImageAPI(text: string) {
    console.log("Calling API");
    const response = await fetch("/api/text-to-image", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ text }),
    });

    if (!response.ok) {
      throw new Error("Failed to call the API");
    }

    console.log("Call successful");
    const data = (await response.json()) as TextToImageResponse;
    return data.files[0].src;
  }

  const addToTimeline = async () => {
    console.log("Adding to timeline...");
    if (lastType === "generated" && base64Image) {
      setIsLoading(true);

      const fileName = "image.png";

      const file = dataURLtoFile(base64Image, fileName);
      const image = await startUpload([file]);
      console.log("ðŸš€ ~ file: stability.tsx:54 ~ convertImage ~ image:", image);
      if (!image) throw new Error("Failed to upload image");

      setTimeline([...timeline, { id: timeline.length, imageUrl: image[0].url }]);
      setIsLoading(false);
    } else if (lastType === "uploaded" && currentImage) {
      setTimeline([...timeline, { id: timeline.length, imageUrl: currentImage }]);
    }
  };

  return (
    <div className="flex flex-col justify-center items-center gap-4 p-2">
      <UploadButton
        endpoint="imageUploader"
        onClientUploadComplete={res => {
          console.log("Files: ", res);
          setCurrentImage(res[0]?.url);
          setLastType("uploaded");
        }}
        onUploadError={(error: Error) => {
          alert(`ERROR! ${error.message}`);
        }}
      />
      <img
        className="w-full max-w-lg h-auto"
        src={base64Image || currentImage || "https://via.placeholder.com/1024"}
        alt="Base64 encoded"
      />
      <div>
        <input
          className="input"
          type="text"
          onChange={e => {
            setTextInput(e.target.value);
          }}
        />
        <button disabled={!base64Image && !currentImage} onClick={convertImage} className="btn btn-secondary">
          Convert
        </button>
        <button
          onClick={async () => {
            setIsLoading(true);
            const src = await callTextToImageAPI(textInput);
            setBase64Image(src);
            setLastType("generated");

            setIsLoading(false);
          }}
          className="btn btn-primary"
          disabled={isLoading}
        >
          Generate
        </button>
      </div>
      <button
        onClick={async () => {
          await addToTimeline();
        }}
        className="btn btn-primary"
      >
        Add to timeline
      </button>

      <div>Timeline</div>
      <button className="btn" onClick={resetTimeline}>
        Reset
      </button>
      <ul>
        {timeline.map((item, index) => (
          <li key={index}>
            <span>{item.id}</span>
            <span>{item.imageUrl}</span>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Stability;
